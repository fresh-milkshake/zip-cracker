name: Build and Release

permissions:
  contents: write

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  version-check:
    name: Check Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
      should_release: ${{ steps.check_tag.outputs.should_release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Check if tag already exists
      id: check_tag
      run: |
        TAG_NAME="${{ steps.get_version.outputs.tag_name }}"
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "❌ Tag $TAG_NAME already exists! Skipping build and release."
          echo "should_release=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ Tag $TAG_NAME does not exist, proceeding with build and release"
          echo "should_release=true" >> $GITHUB_OUTPUT
        fi

  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run clippy
      run: cargo clippy -- -D warnings

  build-pr:
    name: Build PR
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build
      run: cargo build --release

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [version-check]
    if: github.event_name == 'push' && needs.version-check.outputs.should_release == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: zip-cracker-linux-x64
            binary_name: zip-cracker
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: zip-cracker-windows-x64
            binary_name: zip-cracker.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: zip-cracker-macos-x64
            binary_name: zip-cracker
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version-check, build]
    if: github.event_name == 'push' && needs.build.result == 'success' && needs.version-check.outputs.should_release == 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: List downloaded artifacts
      run: find artifacts -type f -exec ls -la {} \;
    
    - name: Prepare release files with proper names
      run: |
        mkdir -p release-files
        cp artifacts/zip-cracker-linux-x64/zip-cracker release-files/zip-cracker-linux-x64
        cp artifacts/zip-cracker-windows-x64/zip-cracker.exe release-files/zip-cracker-windows-x64.exe
        cp artifacts/zip-cracker-macos-x64/zip-cracker release-files/zip-cracker-macos-x64
        ls -la release-files/
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version-check.outputs.tag_name }}
        name: Release ${{ needs.version-check.outputs.tag_name }}
        draft: false
        prerelease: false
        body: |
          ## What's Changed
          
          Automated release from ${{ github.ref_name }} branch
          
          ## Downloads
          
          - **Linux x64**: zip-cracker-linux-x64
          - **Windows x64**: zip-cracker-windows-x64.exe 
          - **macOS x64**: zip-cracker-macos-x64
          
          ## Usage
          
          Download the appropriate executable for your platform and run it directly.
        files: |
          release-files/zip-cracker-linux-x64
          release-files/zip-cracker-windows-x64.exe
          release-files/zip-cracker-macos-x64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}